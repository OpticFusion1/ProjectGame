// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ProjectGameVer3;

import java.util.ArrayList;

/************************************************************/
/**
 * 
 */
public class Encounter {
	
	/**
	 * The constructor initializes an encounter with a set of monsters and heros.
	 * @param teamMonsters
	 * @param teamHeroes
	 */
	public Encounter(ArrayList<Monster> teamMonsters, ArrayList<Hero> teamHeros) {
		this.teamMonsters = teamMonsters;
		this.teamHeros = teamHeros;
		this.winIndicator = 0;
	}

	/**
	 * This integer takes values from 0-2 ,where 0 indicates no one has won, 1 indicates the hero win
	 * and 2 indicates the monsters win.This variable has a getter but no setter to ensure the variable can't
	 * be accessed outside this class.
	 */
	private int winIndicator;
	/**
	 * Each encounter has a new set of heros.
	 */
	private ArrayList<Monster> teamMonsters;
	/**
	 * 
	 */
	private ArrayList<Hero> teamHeros;

	/**
	 * This function is used to call attackChoice and to generate a random hero.In addition it also checks the 
	 * encounter winIndicator to check whether heros have won
	 */
	public void heroChance() {
		if(this.winIndicator !=2) {
        	int p =this.genHero(true);
        	this.teamHeros.get(p).attackChoice(this.teamMonsters,this.teamHeros);
			if(this.teamMonsters.size() == 0) {
				this.winIndicator = 1;
				System.out.println("***************************************************************");
				System.out.println("* The vailiant efforts by you get the heros through the stage *");
				System.out.println("***************************************************************");
			}
		}else {
            if (this.winIndicator != 1)
        		this.winIndicator = 2;
		}	
	}

	/**
	 * This function generates 2 random numbers one for hero , one for monster and checks if 
	 * all heroes have fainted and monsters have won.
	 */
	public void monsterChance() {
		int p2;
		int p1;
		p1= this.genHero(false);
		p2= this.genRandMonster(this.teamMonsters.size());
        if(this.teamMonsters.size()!= 0) {
			this.teamMonsters.get(p2).attack(this.teamHeros.get(p1));
        	}
			if(this.teamHeros.get(p1).hp <=0 ) {
				int check = 0;
				for(int i=0;i<this.teamHeros.size();i++) {
					if(this.teamHeros.get(i).hp<=0) {
						check++;
					}
				}if (check==this.teamHeros.size()) {
					this.winIndicator = 2;
					System.out.println("The monsters win, you fail to break the curse ... Ha hahahahah ha !!");
				}
			}
	}

	/**
	 * This function is to purely display the statistics of each character after a turn.
	 */
	public void dispData() {
		System.out.println("The stats are as follows :");
		System.out.println("========================== Heros ============================");
		for (int i=0;i<this.teamHeros.size() ;i++) {
			System.out.println(this.teamHeros.get(i));
		}
		System.out.println("========================== Monsters ========================");
		for (int i=0;i<this.teamMonsters.size() ;i++) {
			System.out.println(this.teamMonsters.get(i));
		}
	}

	/**
	 * This function takes a boolean input that indicates whether it is a Hero turn or not, 
	 * if it's not hero turn it generates the hero index based on @param attackChance of the heros
	 * selected.
	 * @param turn 
	 * @return p
	 */
	public int genHero(boolean turn) {
		int p=0;
		double r;
		r = Math.random();
		p=this.genRandHero();
			if(turn == false) {
				for (int j=0;j<this.teamHeros.size();j++) {
					if(this.teamHeros.get(j).getHp()>0 ) { 						
						if(r <= this.teamHeros.get(j).getAttackChance()) {
							p = j;
							break; // to stop the for loop from continuing to search
						}
					}
				}
			}
			return p;	
	}

	/**
	 * This function is used to generate a random hero who has not fainted.
	 * @return p
	 */
	public int genRandHero() {
		double r;
		int p ;
		while(true) {
			r = this.teamHeros.size()*Math.random(); // index of heros 
			p =(int) Math.floor(r);
			if(this.teamHeros.get(p).hp > 0 ) {break;}
		}
		return p;
	}

	/**
	 * The function generates a random number in the range of 0 till the input @param size.
	 * @param size 
	 * @return 
	 */
	public int genRandMonster(int size) {
		double r; // random number
        r = size*Math.random(); //for random monster
        int p =(int) Math.floor(r);
        return p;
	}

	/**
	 * @return the teamHeros
	 */
	public ArrayList<Hero> getTeamHeros() {
		return teamHeros;
	}

	/**
	 * @param teamHeros the teamHeros to set
	 */
	public void setTeamHeros(ArrayList<Hero> teamHeros) {
		this.teamHeros = teamHeros;
	}

	/**
	 * @return the winIndicator
	 */
	public int getWinIndicator() {
		return winIndicator;
	}

	/**
	 * @return the teamMonsters
	 */
	public ArrayList<Monster> getTeamMonsters() {
		return teamMonsters;
	}
	
};

