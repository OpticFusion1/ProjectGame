// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ProjectGameVer3;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

/************************************************************/
/**
 * 
 */
public class Hero extends Role {
	
	/**
	 * 
	 */
	public Hero() {
		super();
		this.name ="Hero";
	}

	/**
	 * @param attackPower
	 * @param name
	 * @param maxHP
	 */
	public Hero(int attackPower, String name, int maxHP) {
		super(attackPower, name, maxHP);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param name
	 */
	public Hero(String name) {
		super(name);
		// TODO Auto-generated constructor stub
	}

	/**
	 * This function is what displays the choice of monsters for a hero to attack.
	 * The other function of the function is that it removes dead monsters from memory.
	 * @param monster 
	 * @param hero 
	 */
	public void attackChoice(ArrayList<Monster> monster, ArrayList<Hero> hero) {
		for (int i=0;i<monster.size() ;i++) {
	    	if(monster.get(i).getHp()<=0) {
	    		monster.remove(i);	
	    	}
        }
        if(monster.size()!= 0) {
        	System.out.println("Who does " +this.name +" attack?") ;
	    	for (int i=0;i<monster.size() ;i++) {
	    		System.out.println((i+1)+". "+monster.get(i).getName());
	        }
	        Scanner input = new Scanner(System.in);
	        int option;
			boolean j;
			do {
					j = false;
				try {
					option = input.nextInt();
					attack(monster.get(option-1));
					if(monster.get(option-1).getHp()<=0) {
			    		monster.remove(option-1);
			    	}
				}catch(IndexOutOfBoundsException e ) {
			 		  System.out.println("Input a number between 1-"+monster.size());
			 		  j=true;
				}catch(InputMismatchException k) {
						j=true;
						System.out.println("Input a number between 1-"+monster.size());
						input.next();
				}
			
			}while(j);	
		
        }
	}

	/**
	 * Function Attack of a hero needs to check if they are to skip a turn  and also it helps to 
	 * un-tag heroes from the "(goo)" tag.
	 * @param opponent 
	 */
	public void attack(Role opponent) {
		System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		this.checkPoison();
		if(!this.skip) {
			opponent.getAttacked(this);
		}else {
			System.out.println(this.name+" Skips a turn.");
			this.skip=false;
			int startIndex = this.getName().indexOf("(");
			if (startIndex>0) {
				this.goo=false;
				this.setName(this.getName().substring(0,startIndex));
			}
		}
		System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");	
	}

	/**
	 * This function revives fainted heros to 25% of the health and gives all active heroes full health.
	 * In addition all poisoned heroes or heroes in "goo" are brought to a normal state.
	 */
	public void stageRevive() {
		this.setPoisoned(0);
		this.setSkip(false);
		this.goo=false;
		int startIndex = this.getName().indexOf("(");
		if(startIndex > 0) {
			this.setName(this.getName().substring(0,startIndex));
		}
		if (this.getHp()>0) {
			this.setHp(getMaxHP());
		}else {
			this.setHp(getMaxHP()/4);
		}
	}
};
