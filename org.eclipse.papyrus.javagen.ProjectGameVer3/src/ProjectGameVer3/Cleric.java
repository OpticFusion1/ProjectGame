// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ProjectGameVer3;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

import ProjectGameVer3.Hero;
import ProjectGameVer3.Monster;
import ProjectGameVer3.Role;

/************************************************************/
/**
 * 
 */
public class Cleric extends Hero {
	/**
	 * Default parameters for a Cleric.
	 */
	public Cleric() {
		super();
		this.name ="Cleric";
		this.attackPower = 30;
		this.maxHP = 35;
		this.hp = this.maxHP;
	}

	/**
	 * Initializes a Cleric with  healing power, name and Max Health points.
	 * @param attackPower
	 * @param name
	 * @param maxHP
	 */
	public Cleric(int attackPower, String name, int maxHP) {
		super(attackPower, name, maxHP);
		this.name += " the Cleric";
	}

	/**
	 * Initializes a Cleric with a name and default parameters.
	 * @param name
	 */
	public Cleric(String name) {
		super(name);
		this.name += " the Cleric";
		this.attackPower = 30;
		this.maxHP = 35;
		this.hp = this.maxHP;
	}

	@Override
	/**
	 * This function is redefined as the Cleric can heal only heros and user should choose a hero to heal.
	 * @param monster 
	 * @param hero 
	 */
	public void attackChoice(ArrayList<Monster> monster, ArrayList<Hero>heros) {
		for (int i=0;i<monster.size() ;i++) {
		    if(monster.get(i).getHp()<=0) {
		    		monster.remove(i);
		    }
		}
		if(monster.size()!= 0) {
	 	   System.out.println("Who does " +this.name +" heal?");
		 	  for(int i=0;i<heros.size();i++) {
						System.out.println((i+1)+". "+heros.get(i).getName());
		 	  }
	 	   Scanner in = new Scanner(System.in);
	       int option;
	       boolean j;
			do {
					j = false;
				try {
					option = in.nextInt();
					this.attack(heros.get(option-1));
				}catch(InputMismatchException e) {
			 		  System.out.println("Input a number between 1-4");
			 		  j=true;
			 		  in.next();
		 	   	}catch(IndexOutOfBoundsException e ) {
			 		  System.out.println("Input a number between 1- 4");
			 		  j=true;
				}
			}while(j);
		}
	}

	/**
	 * Redefined attack, as the Cleric heals instead of attacking.The function removes all tags,
	 * and all parameters are rest to default state.This function is similar to stage revive but 
	 * to make the game more interactive the function has differnt strings to display.
	 * @param hero 
	 */
	public void attack(Role hero) {
		System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
		this.checkPoison();
		if(!this.skip) {
			boolean heal = false;
			hero.setHp(hero.getHp() + this.attackPower);
			if (hero.getHp()> hero.getMaxHP()) {
				hero.setHp(hero.getMaxHP());
			}
			hero.goo=false;
			System.out.println(this.name+" heals "+ hero.name+" by :" + this.attackPower +" HP");
			if (hero.poisoned != 0) {
				hero.setPoisoned(0);
				heal =true;
				int startIndex = hero.getName().indexOf("(");
				hero.setName(hero.getName().substring(0,startIndex));
				System.out.println(hero.name+" is also de-poisoned");
			}
			if (hero.skip) {
				hero.setSkip(false);
				if (!heal) {
					int startIndex = hero.getName().indexOf("(");
					if (startIndex>0) {
						hero.setName(hero.getName().substring(0,startIndex));
					}
				}
			System.out.println(hero.name+" is also de-goo-ed");
			}
		}else {
				System.out.println(this.name+" Skips a turn.");
				this.skip=false;
				int startIndex = this.getName().indexOf("(");
				this.setName(this.getName().substring(0,startIndex));
		}
		System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
	}
};
