// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package ProjectGameVer3;

/************************************************************/
/**
 * 
 */
public class Role {
	/**
	 * 
	 */
	public Role() {
		this.name = "Role";
		this.maxHP = 50;
		this.hp = this.maxHP ;
	}

	/**
	 * @param name
	 */
	public Role(String name) {
		this.name = name;
		this.maxHP = 50;
		this.poisoned =0;
		this.hp = this.maxHP ;
	}

	/**
	 * @param attackPower
	 * @param name
	 * @param maxHP
	 */
	public Role(int attackPower, String name, int maxHP) {
		this.attackPower = attackPower;
		this.name = name;
		this.maxHP = maxHP;
		this.hp = this.maxHP ;
	}
	

	/**
	 * The attacking power of a Role 
	 */
	protected int attackPower;
	/**
	 * A pure string to identify a Role, e.g "John"
	 */
	protected String name;
	/**
	 * Variable that declares a Role is poisoned.
	 * It's value signifies the number of turns that the Role will be poisoned.
	 */
	protected int poisoned = 0;
	/**
	 * The health points of a Role.
	 */
	protected int hp;
	/**
	 * The maximum allowed Health Points for any given Role.
	 */
	protected int maxHP;
	/**
	 * A boolean to indicate whether a Role has dodged an attack or not.
	 */
	protected boolean dodge = false;
	/**
	 * A boolean to indicate whether a Role has to skip a turn or not.
	 */
	protected boolean skip = false;
	/**
	 * A boolean to indicate whether a Role is in goo (slime) or not.
	 * This variable is important to decide retaliation.
	 */
	protected boolean goo = false;
	/**
	 * A double that indicates the percentage chances of a Role dodging  an attack.
	 */
	protected double dodgeChance = 0;
	/**
	 * A double that indicates the percentage chances of a Role getting attacked.
	 */
	protected double attackChance = 0;
	
	

	/**
	 * A default function of attack
	 * @param opponent 
	 */
	public void attack(Role opponent) {
		opponent.hp = opponent.hp - this.attackPower;
	}

	/**
	 * The function judges the retaliation capability.
	 * @param opponent 
	 */
	public void retalliation(Role opponent) {
		if (!opponent.goo) {
			opponent.checkPoison();
			this.getAttacked(opponent);
			System.out.println("Retalliation by "+ opponent.name);
		}else {
			System.out.println("due to goo, Retalliation fails by "+ opponent.name);
			this.goo=false;
		}
	}

	/**
	 * This checks whether person is poisoned and deducts HP of 3 if poisoned.
	 * The function also takes care of the "(poison)" tag to the name.
	 */
	public void checkPoison() {
		if(this.poisoned != 0) {
			this.poisoned --;
			this.setHp(this.getHp()-3);
			if(this.poisoned == 0) {
				int startIndex = this.getName().indexOf("(");
				if(startIndex > 0) {
					this.setName(this.getName().substring(0,startIndex));
				}
			}
		}
	}

	/**
	 * Helps to judge the characters dodge capability and it is the main function used to define 
	 * attack in sub classes of Role.This is function is the opposite of attack where the function
	 * decides what the Role that gets attacked does. 
	 * @param opponent 
	 */
	public void getAttacked(Role opponent) {
		this.dodge =false;
		double r = Math.random();
		if( r >= this.dodgeChance) {
		this.hp = this.hp - opponent.attackPower;
		System.out.println(opponent.name+ " whacks "+ this.name+" by:"+opponent.attackPower+" HP");
		if (this.hp <=0) {
			this.hp = 0;
			System.out.println(this.name+" faints");
			}
		}else {
				System.out.println(opponent.name+ " tries to whacks "+ this.name);
				System.out.println("but it's dodged by "+ this.name);
				this.dodge =true;
			}
	}

	/**
	 * @return the attackPower
	 */
	public int getAttackPower() {
		return attackPower;
	}

	/**
	 * @param attackPower the attackPower to set
	 */
	public void setAttackPower(int attackPower) {
		this.attackPower = attackPower;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the poisoned
	 */
	public int getPoisoned() {
		return poisoned;
	}

	/**
	 * @param poisoned the poisoned to set
	 */
	public void setPoisoned(int poisoned) {
		this.poisoned = poisoned;
	}

	/**
	 * @return the hp
	 */
	public int getHp() {
		return hp;
	}

	/**
	 * @param hp the hp to set
	 */
	public void setHp(int hp) {
		this.hp = hp;
	}

	/**
	 * @return the dodge
	 */
	public boolean isDodge() {
		return dodge;
	}

	/**
	 * @param dodge the dodge to set
	 */
	public void setDodge(boolean dodge) {
		this.dodge = dodge;
	}

	/**
	 * @return the skip
	 */
	public boolean isSkip() {
		return skip;
	}

	/**
	 * @param skip the skip to set
	 */
	public void setSkip(boolean skip) {
		this.skip = skip;
	}

	/**
	 * @return the attackChance
	 */
	public double getAttackChance() {
		return attackChance;
	}

	/**
	 * @param attackChance the attackChance to set
	 */
	public void setAttackChance(double attackChance) {
		this.attackChance = attackChance;
	}

	/**
	 * @return the maxHP
	 */
	public int getMaxHP() {
		return maxHP;
	}

	/**
	 * @return the dodgeChance
	 */
	public double getDodgeChance() {
		return dodgeChance;
	}
	
	@Override
	public String toString(){
		if(this.hp<=0) {
			return String.format("| "+this.name+ " fainted |");
		}
		else {
			return String.format("| "+this.name+"\t  -- "+this.hp+"/"+this.maxHP+" HP |");
		}
	}
};
